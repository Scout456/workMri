/**
 * 
 * Scripts for login functionality that are to be preloaded come here.
 * Embed this category in site-specific clientlibrary.
 */
       
        
        const REQUEST_HEADERS = {
				'Content-Type': 'application/json'
            };

		/** 
        	Query parameter function that allows + symbol to be accepted in the query parameter without replacing it with space.
        **/
		function getUrlParameter(name) {
            name = name.replace(/\[/, '\\[').replace(/\]/, '\\]');
            const regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
            const results = regex.exec(location.search);
            return results === null ? '' : decodeURIComponent(results[1]);
        }


		/**
         * Summary: Update form body with token value. 
         * Description: Use this function in Form container's "Update Request Function" field 
         * 				to pass the token query parameter via the form body.
         * 
         */ 
        function updateOnResetRequest(){

            const tokenValue = getUrlParameter("token");

            return {
                body: {
                    'resetToken': tokenValue
                }
            };
			
	    }
		
       /**
		* Summary: Set request headers. Configurations fetched from site level settings.
		* 
		*/ 
        function setApiHeaders() {
			const headerElms = document.querySelectorAll('input[data-header][type=hidden]');
            headerElms.forEach(function(headerElm) {
                const name = headerElm.getAttribute('name');
                const value = headerElm.value;
                REQUEST_HEADERS[name] = value;
            });
        }
        
       /**
		* Summary: Returns header value for key. 
		* 
		*/ 
        function getRequestHeader(key) {
            if(key) {
                return REQUEST_HEADERS[key] || '';
            }


            return REQUEST_HEADERS;
        }

        /**
         * @function
		 * Summary: Called on successful login to drop cookies at browser. 
		 * Description: Use this function in Form container's "On Success Function" field to
		 * the update session cookie.
		 * 
		 */ 
		function onSuccessUserLogin(data) {
			$('#user-login').find('.o-form-container__success-msg').html('');

			if (data.errorCode == 0) {
				let jwtToken = data.response.jwtToken.id_token;
		        let sessionApiUrl=$('#session-api-url').val();
		        localStorage.setItem('id.token', jwtToken);
				localStorage.setItem('dynamicEmail', $('input[type=email]').val());
				setApiHeaders();
				updateSessionCookie(sessionApiUrl,true);
		
			} 
		}

		 /**
		 * @function
		 * Summary: Update session cookie. 
		 * Parameters :  apiEndpoint is the end-point for session API.
		 *               enableValue if session cookie has to be created or removed. 
		 * 
		 */
		 function updateSessionCookie(apiEndpoint,enableValue) {
			 
	     let onSuccessRedirectLink;

            if(enableValue){
                const wcmmodeChk = getCookie("cq-authoring-mode");
                if (!wcmmodeChk){
                    onSuccessRedirectLink =	$('.hidden input[name="loginRedirectLink"]').val();

                }else{
                    onSuccessRedirectLink = $('.hidden input[name="loginRedirectLinkAuthor"]').val();

                }

             }else{
                 onSuccessRedirectLink= $('.login-link a').attr('href');

             }
			 
		 const requestOptions = {
		  method: 'GET',
		  headers: {
			'Content-Type': getRequestHeader('Content-Type'),
			'x-id-token':  localStorage.getItem('id.token'),
			'x-application-id' : getRequestHeader('x-application-id'),
			'x-country-code': getRequestHeader('x-country-code'),
			'x-preferred-language': getRequestHeader('x-preferred-language'),
		  },
		 mode: 'cors',
		 cache: 'no-cache',

		};
		fetch(apiEndpoint+"?enable="+enableValue, requestOptions)
		.then(function(response) {

			// on API success response
			if(response.status === 200){
				window.location.href=onSuccessRedirectLink;
            }



			return response;
		})
		.catch(function(error) {

			console.log('ERROR in session API :', error);
		});
		       
		
		
		
		}

/** User Login -- starts**/

function onSuccessUserLogin(data) {
	if (data.errorCode == 0) {
		let jwtToken = data.response.jwtToken.id_token;
		setCookie('jwtToken', jwtToken, 1);
		localStorage.setItem('dynamicEmail', $('input[type=email]').val());

		let currOrigin = window.location.origin; 
		let docReferrer = sessionStorage.getItem('documentReferrer');
		if((docReferrer)?.indexOf('/secure/') >= 0 && (docReferrer)?.indexOf(currOrigin) >= 0){
			window.location.href = docReferrer;
		}else{
			window.location.href = $('input[name=homepage]').length > 0 ? currOrigin + $('input[name=homepage]').val() : currOrigin + '/au/en/secure/home.html';
		}

	} else {
		onErrorUserLogin(data);
	}
}

function onErrorUserLogin(error) {
	deleteCookie('jwtToken');
	localStorage.removeItem("dynamicEmail");
	onErrorFailureMsgDisplay(error);
}


function onSuccessUserVerification(data) {

	if (data.response.userExists) {
		$('#user-verification').find('.o-form-container__success-msg').html('');
		let userEmail = $('input[type=email]').val();
		$('#user-registration #email-id').val(userEmail);
		$('#user-verification *').attr('disabled', 'true').removeClass('active');
		$('#user-registration').css('display', 'block');
        let scrollPos =  $('#user-registration').offset().top -100;
		$(window).scrollTop(scrollPos);
	}

}

/** Cookie functions -- starts **/

function setCookie(cname, cvalue, exdays) {
	let expires = "";
	if (exdays !== '') {
		let d = new Date();
		d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
		expires = "expires=" + d.toUTCString();
	}
	document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/;";
}

//function to getCookie
function getCookie(cname) {
	let name = cname + "=";
	let ca = decodeURIComponent(document.cookie).split(';');
	let c = ca.find(cookie => cookie.trim().startsWith(name));
	return c ? c.substring(name.length).trim() : '';
  }

//function to deleteCookie
function deleteCookie(name) {
	document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/;Secure;';
}


/** Cookie functions -- ends **/

/** Set dynamic email -- starts**/

function setDynamicEmail(){
setTimeout(function () {
		$('input[name="dynamicEmail"]').val(localStorage.getItem('dynamicEmail'));
    }, 10);
}

/** Set dynamic email -- ends**/

/** Function for Reset Password Error Scenario **/
function onErrorResetPassword(error) {
    let errorResponse = error.response;
    if(typeof errorResponse === 'undefined'){
        let sysFailureErrorMessage = $('.o-form-container').find('.o-form-container__error-msg.active');
		sysFailureErrorMessage.html(' Sorry, your password cannot be reset at this time. For further support please email <a href="mailto:joanne.mathie@abbott.com">Abbott Vascular ANZ</a>.');
    }else{
		onErrorFailureMsgDisplay(error);

    }
}
/** Reset Password Error Function ends **/

/** custom error msg -starts **/
function onErrorFailureMsgDisplay(error) {
   	let i18nKey = error.response.i18nMessageKey ? error.response.i18nMessageKey : "";
	let i18KeyEle = $('.o-form-container').find('.o-form-container__error-msg.active');
	if(i18nKey == "AUTH-1014") {
		i18KeyEle.text('User does not exist.');
    }else if(i18nKey == "AUTH-1001") {
		i18KeyEle.text('Invalid Login.');
    }else if(i18nKey == "PM-1007") {
		i18KeyEle.text('Token expired.');
    }else if(i18nKey == "PM-1013") {
		i18KeyEle.html('Your account is locked due to invalid password attempts. For further information please email <a href="mailto:joanne.mathie@abbott.com">Abbott Vascular ANZ</a>.');
    }else if(i18nKey == "REG-USER-1001") {
		i18KeyEle.html('Sorry, this account is already registered. For further support please email <a href="mailto:joanne.mathie@abbott.com">Abbott Vascular ANZ</a>.');
    }else if(i18nKey == "LOOKUP-USER-1001") {
		i18KeyEle.text('Sorry, this information is not recognised. Please verify and re-enter your access code and email address.');
    }
}
/** custom error msg -Ends **/

/** User Login -- ends**/
let currentPagePath = window.location.href;
let emailToAddress;
let singleInputs, dropdownFields, checkboxFields, radioFields;


function UpdateContactUsRequest(formData) {
	let formBody = formData.body;
	for (const key in formBody) {
		if (Array.isArray(formBody[key])) {
			let transFormArray = formData.body[key];
			let transFormObject = [];
			transFormArray.filter(obj => {
				if (obj.consentValue) {
					transFormObject.push(obj.consentName)
				}
			});
			formData.body[key] = transFormObject.toString();
		}
	}
    if (formData.body.ep === false) {
	  formData.body.ep = '';
	}
	if (formData.body.ep === true) {
	  formData.body.ep = $('input[name="ep"]').val();
	}
	if (currentPagePath) {
		formData.body.currentPageURL = currentPagePath;
	}
	if (emailToAddress) {
		formData.body.emailAddress = emailToAddress;
	}
	if (formData.body["g-recaptcha-response"]) {
		formData.body.captchaValue = formData.body["g-recaptcha-response"];
	}
	if (formData["g-recaptcha-response"] && $("input[data-form-mode='wizard']")) {
		formData.body.captchaValue = formData["g-recaptcha-response"];
        formData.body["g-recaptcha-response"] = formData["g-recaptcha-response"];
	}
}

function OnBeforeRequest() {
	if (document.querySelector("[name=CV_Forms_BranchingEmailRules]")) {
		for (let i = 0; i < ($('input[name=CV_Forms_BranchingEmailRules]').val())?.split("$$").length; i++) {
			let fieldName = ($('input[name=CV_Forms_BranchingEmailRules]').val())?.split("$$")[i]?.split("=")[0]?.split("||")[0];
			let selectedValue;
			let formatField = new RegExp(/[^\w\s]/);
			if (!formatField.test(fieldName)) {
				if (document.querySelector("[name=" + fieldName + "]")?.closest('fieldset').classList.contains('radio') || document.querySelector("[name=" + fieldName + "]")?.closest('fieldset').classList.contains('checkbox')) {
					let radios = document.querySelectorAll("[name=" + fieldName + "]");
					for (let radio of radios) {
						if (radio.type === 'radio' && radio.checked) {
							// get value, set checked flag or do whatever you need to
							selectedValue = radio.value;
						}
					}
				} else if (document.querySelector("[name=" + fieldName + "]")?.closest('fieldset').classList.contains('drop-down')) {
					selectedValue = ($('[name=' + fieldName + ']').find('li.selected').find('span').text().trim())
				}
				if (selectedValue == ($('input[name=CV_Forms_BranchingEmailRules]').val())?.split("$$")[i]?.split("=")[0]?.split("||")[1]) {
					emailToAddress = ($('input[name=CV_Forms_BranchingEmailRules]').val())?.split("$$")[i]?.split("=")[1];
				}
			}
		}
	}
	loadercallback();
}
function removeSpinner() {
	setTimeout(function() {
		$(".o-form-container__buttons").find('.a-spinner').remove();
	}, 10);
}

function contactusSuccessmsgCallback() {
	removeSpinner();
}

function contactusFailuremsgCallback() {
	removeSpinner();
}
function loadercallback(){
        $(".o-form-container__buttons").append('<div class="a-spinner" style="margin:110px 0 0 15px;"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>');
}
function dropDownField() {
	$('.a-dropdown__field').find('li').each(function() {
		let dataOption = $(this).attr('data-optionvalue');
		if (dataOption) {
			$('fieldset').each(function() {
				if ($(this).find('input[type=checkbox]').attr('name') == dataOption) {
					$(this).hide();
				}
			});
		}
	});
}

function bodyDropDownField() {
	$("body").on('DOMSubtreeModified', '.a-dropdown__field>span', function(e) {
		let _this = $(this);
		setTimeout(function() {
			let selectedValue = _this.closest('.a-dropdown__field').find('.a-dropdown__menu .selected').attr('data-optionvalue');
			if (!selectedValue) return;
	
			_this.closest('.a-dropdown__field').find('li[data-optionvalue]').each(function() {
				let dataOption = $(this).attr('data-optionvalue');
				$('fieldset').each(function() {
					let checkbox = $(this).find('input[type=checkbox]');
					if (checkbox.attr('name') === dataOption) {
						checkbox.prop('checked', false);
						$(this).toggle(selectedValue.includes(checkbox.attr('name').trim()));
					}
				});
			});
		}, 10);
	});
}

function fieldsetCheckbox() {
	$('fieldset.checkbox').each(function() {
		if ($(this).find('input').attr('data-required') == 'true' && $(this).find('input').length > 1) {
			$(this).addClass('set-value-checkbox-options')
			$(this).attr('data-disabled', 'true')
		}
	})
}


function submitButtonValidate() {
	setTimeout(function() {
		if ($('[required], [data-required="true"]').length > 0) {
			singleInputs = $('.o-form-container__main-form [required]:visible').filter(function() {
				return $.trim($(this).val()).length == 0
			}).length == 0;
			dropdownFields = $('.o-form-container__main-form .a-dropdown[data-required="true"]:visible').filter(function() {
				return ($(this).find('.selected').length) == 0
			}).length == 0;
			let checkboxFlag = [];
				$('.o-form-container__main-form fieldset.checkbox:not(.set-value-checkbox-options):visible input[data-required="true"]').each(function() {
					if(!$(this).prop('checked')) {
						checkboxFlag.push(0);
					}

					else{
						checkboxFlag.pop(0);
					}

			})

			if (checkboxFlag.toString().indexOf('0') > -1) {
				checkboxFields = false;
			} else{
				checkboxFields = true;
			}
			let radioFlag = [];

			if($('.o-form-container__main-form fieldset.radio:visible input[data-required="true"]').length > 0 ){
				$('.o-form-container__main-form fieldset.radio:visible input[data-required="true"]').closest('fieldset').each(function(){
					if($(this).find('input:checked').length == 0){
							radioFlag.push(0);
					}
				})
			}
			
			if (radioFlag.toString().indexOf('0') > -1) {
				radioFields = false;
			} else {
				radioFields = true;
			}
		}
	}, 10);

	setTimeout(function() {
		if (singleInputs && dropdownFields && checkboxFields && radioFields && $('.o-form-container__main-form .validation-error').length == 0 && $('.o-form-container__main-form .validation-regex').length == 0 && $('.o-form-container__main-form .validation-require').length == 0) {
			$('.o-form-container__main-form+.o-form-container__buttons [type="submit"]').removeAttr('disabled');
		}
		else{
			$('.o-form-container__main-form+.o-form-container__buttons [type="submit"]').attr('disabled', true);
		}
	}, 200);
}	

(function() {
	setTimeout(function() {
		dropDownField();
		bodyDropDownField();
		fieldsetCheckbox();
		let disableFlag = 0;
		if ($('fieldset.set-value-checkbox-options').length > 0) {
			const formContainer = $('.o-form-container__main-form');
			const submitButton = formContainer.next('.o-form-container__buttons').find('[type="submit"]');
			const inputs = $('fieldset.set-value-checkbox-options input:checkbox, .o-form-container__main-form input, .o-form-container__main-form textarea');
		
			function handleSubmit(e) {
				e.preventDefault();
				$('fieldset.set-value-checkbox-options').find('input').removeAttr('data-required').end().removeClass('validation-require');
				checkboxValidate($(this));
			}
		
			function handleChangeBlurInput(e) {
				e.preventDefault();
				checkboxValidate($(this));
				if (e.type === 'change') {
					const _this = $(this);
					setTimeout(() => _this.trigger('blur').blur(), 200);
				}
			}
		
			function handleDOMSubtreeModified(e) {
				checkboxValidate($(this));
			}
		
			function checkboxValidate(targetEle) {
				const fieldsets = $('fieldset.set-value-checkbox-options');
				const checkboxes = fieldsets.find('input[type=checkbox]');
				const isChecked = checkboxes.filter(':checked').length > 0;
		
				fieldsets.attr('data-disabled', isChecked ? 'false' : 'true');
		
				setTimeout(() => {
					const requiredFields = $('[required], [data-required="true"]');
					const singleInputs = requiredFields.filter(':visible').filter(function() {
						return $.trim($(this).val()).length === 0;
					}).length === 0;
		
					const dropdownFields = $('.o-form-container__main-form .a-dropdown[data-required="true"]:visible').filter(function() {
						return $(this).find('.selected').length === 0;
					}).length === 0;
		
					const checkboxFields = $('.o-form-container__main-form fieldset.checkbox:not(.set-value-checkbox-options):visible input[data-required="true"]').filter(':not(:checked)').length === 0;
		
					const radioFields = $('.o-form-container__main-form fieldset.radio:visible input[data-required="true"]').closest('fieldset').filter(function() {
						return $(this).find('input:checked').length === 0;
					}).length === 0;
		
					disableFlag = $('.checkbox[data-disabled="true"]').length === 0 ? 1 : 0;
		
					if (disableFlag === 1) {
						setTimeout(() => {
							if (singleInputs && dropdownFields && checkboxFields && radioFields && $('.o-form-container__main-form .validation-error, .validation-regex, .validation-require').length === 0) {
								submitButton.removeAttr('disabled');
							} else {
								submitButton.attr('disabled', true);
							}
						}, 200);
					} else {
						setTimeout(() => {
							if (targetEle.closest('fieldset').hasClass('set-value-checkbox-options') && targetEle.closest('fieldset').attr('data-disabled') === 'true') {
								targetEle.closest('fieldset').addClass('validation-require').find('.checkbox--text-require').show();
							}
							submitButton.attr('disabled', true);
						}, 10);
					}
				}, 10);
			}
		
			submitButton.on('click', handleSubmit);
			inputs.on('change blur input', handleChangeBlurInput);
			$("body").on('DOMSubtreeModified', '.o-form-container__main-form .a-dropdown__field>span', handleDOMSubtreeModified);
		}
		
		$('.o-form-container__main-form input, .o-form-container__main-form textarea').on('input', function(e) {
            e.preventDefault();
            submitButtonValidate();
        });
        $("body").on('DOMSubtreeModified', '.o-form-container__main-form .a-dropdown__field>span', function(e) {
             	submitButtonValidate();
		})
        submitButtonValidate();
	}, 1000);
})();
const searchtype = "PM";
const batterysearchtype = "BATTERY";
let modelNumber;
let serialNumber;
const laserAdhesion  = "LASER_ADHESION";
const ICDBattery  = "ICD_BATTERY";
const ICDBatterycd  = "CD";
const lookuptype = "PM_2023";
const lookupTypePM2025="PM_2025";
let entRecaptcha = ($('input[name=enterpriseRecaptcha]').val() === "true");

function updateRequest(formData, searchType, lookupType) {
    setTimeout(function() { 
        loadercallback();
    }, 500);

    formData.body = {
        model: formData.body.model,
        serial: formData.body.serial,
        searchType: searchType,
        lookupType: lookupType,
        captchaValue: formData.body["g-recaptcha-response"],
        ...(entRecaptcha) && {captchaAction: "submit"},
        ...(entRecaptcha) && {captchaType: "ENT"}
    }
    return formData;
}

function UpdatePacemakerRequest(formData) {
    return updateRequest(formData, searchtype, searchtype);
}

function UpdatenewHeartmateRequest(formData) {
    formData.body.model = formData.body.model.toUpperCase();
    return updateRequest(formData, 'HM3', 'HEARTMATE_3');
}

function UpdatePacemaker2025Request(formData) {
    return updateRequest(formData, searchtype, lookupTypePM2025);
}

function UpdatenewPacemakerRequest(formData) {
    return updateRequest(formData, searchtype, lookuptype);
}

function UpdateLaserAdhesionRequest(formData) {
    return updateRequest(formData, searchtype, laserAdhesion);
}

function UpdateBatteryRequest(formData) {
    return updateRequest(formData, ICDBatterycd, ICDBattery);
}

function loadercallback(){
    $(".o-form-container__buttons").append('<div class="a-spinner" style="margin:85px 0 0 15px;"><div class="spinner-border" role="status"><span class="sr-only">Loading...</span></div></div>');
    $(".o-form-container__success-msg").find('p').hide();
}

function handleSuccessResponse(successResponse, successMessage, failureMessage) {
    $(".o-form-container__buttons").find('.a-spinner').remove();
    $(".o-form-container__success-msg").find('p').show();

    if (successResponse) {
        let successMsg = "<p>" + successMessage + "</p>";
        $('.o-form-container__success-msg').empty();
        $('.o-form-container__success-msg').append(successMsg);
        if ($("input[name='successmessage']").length != 0) {
            $('.o-form-container__success-msg').append("<p>" + $("input[name='successmessage']").val() + "</p>");
        }
    } else {
        let failureMsg = "<p>" + failureMessage + "</p>";
        $('.o-form-container__success-msg').empty();
        $('.o-form-container__error-msg').empty();
        $('.o-form-container__error-msg').append(failureMsg);
        if ($("input[name='failmessage']").length != 0) {
            $('.o-form-container__error-msg').append("<p>" + $("input[name='failmessage']").val() + "</p>");
        }
    }
}

function UpdateOnSuccess(res) {
    let successResponse = res.response.serial && res.response.model;
    handleSuccessResponse(successResponse, $("input[name='successMessage']").val(), $("input[name='failureMessage']").val());
}

function UpdateOnSuccessHeartmate(res) {
    let successResponse = res.response.lookupType;
    handleSuccessResponse(successResponse, $("input[name='successMessage']").val(), $("input[name='failureMessage']").val());
}

function UpdateOnFail(responseError){

    $(".o-form-container__buttons").find('.a-spinner').remove();
    $(".o-form-container__error-msg").find('p').show();

		let failureMsg = "<p>"+ $("input[name='auth']").val() + "</p>";
        $('.o-form-container__error-msg').empty();
        $('.o-form-container__error-msg').append(failureMsg);
}

const addKeyupListener = (selector, callback) => {
    const element = document.querySelector(selector);
    if (element) {
        element.addEventListener('keyup', callback);
    }
};

const clearMessages = () => {
    $('.o-form-container__error-msg').empty();
    $('.o-form-container__success-msg').empty();
    $('.o-form-container__error-msg.active').empty();
    $('.o-form-container__success-msg.active').empty();
};

const handleModelKeyup = (event) => {
    modelNumber = event.target.value;
    event.target.setAttribute('data-model-number', modelNumber);
    if (event.target.value.length === 0) {
        clearMessages();
    }
    event.target.value = event.target.value.slice(0, event.target.getAttribute('maxlength'));
};

const handleSerialKeyup = (event) => {
    serialNumber = event.target.value;
    event.target.setAttribute('data-serial-number', serialNumber);
    if (event.target.value.length === 0) {
        clearMessages();
    }
};

const handleModelValidation = (event) => {
    const target = event.target;
    if (target.id !== "modelnumber") {
        const errorElement = target.closest('.form-group').querySelector('.a-input-field--text-error');
        if (target.value.length > 1 && target.value.length < 4) {
            errorElement.style.display = "block";
        } else {
            errorElement.style.display = "none";
        }
    }
};

const handleSerialValidation = (event) => {
    const target = event.target;
    const errorElement = target.closest('.form-group').querySelector('.a-input-field--text-error');
    if (target.value.length > 1 && target.value.length < 6) {
        errorElement.style.display = "block";
    } else {
        errorElement.style.display = "none";
    }
};

const initializeListeners = () => {
    addKeyupListener("[name=model]", handleModelKeyup);
    addKeyupListener("[name=serial]", handleSerialKeyup);
    addKeyupListener("[name=model]", handleModelValidation);
    addKeyupListener("[name=serial]", handleSerialValidation);
};

if ($('#model-content-form').length > 0) {
    setTimeout(() => {
        addKeyupListener("[name=model]", (event) => { 
            modelNumber = event.target.value; 
            event.target.setAttribute('data-model-number', modelNumber);
        });
        addKeyupListener("[name=serial]", (event) => { 
            serialNumber = event.target.value; 
            event.target.setAttribute('data-serial-number', serialNumber);
        });
    }, 1000);
} else {
    setTimeout(() => {
        document.querySelector("[name=model]")?.setAttribute('maxlength', 4);
        initializeListeners();
    }, 1000);
}

function UpdateCompleteFunction() {
    const modelElement = document.querySelector("[name=model]");
    const serialElement = document.querySelector("[name=serial]");
    modelNumber = modelElement.getAttribute('data-model-number') || '';
    serialNumber = serialElement.getAttribute('data-serial-number') || '';
    modelElement.value = modelNumber;
    serialElement.value = serialNumber;
}
(function(){
    setTimeout(function () {
        if ($("[data-conditional-variable]")) {
            const updateVisibility = (selector, addClass, removeAttr) => {
                if ($(selector)?.length > 0) {
                    $(selector).addClass(addClass).removeAttr(removeAttr);
                }
            };
        
            updateVisibility('.o-form-container__main-form [required]:not(:visible)', 'set-required', 'required');
            updateVisibility('.o-form-container__main-form [data-required="true"]:not(:visible)', 'set-data-required', 'data-required');
        
            $("[data-conditional-variable]").each(function () {
                const fieldName = $(this).attr('data-conditional-variable');
                const triggerField = $('[name=' + fieldName + ']');
        
                const handleConditionalCase = (fieldName, show) => {
                    const conditionalCase = $('[data-conditional-variable=' + fieldName + ']').find('.conditional__case');
                    conditionalCase.toggle(show);
                    conditionalCase.find('.set-required').attr('required', show);
                    conditionalCase.find('.set-data-required').attr('data-required', show);
                    if (!show) {
                        conditionalCase.find('input[type=text], textarea').val('');
                        conditionalCase.find('input[type=checkbox], input[type=radio]').prop('checked', false);
                    }
                };
        
                if (triggerField?.hasClass('a-dropdown__menu')) {
                    triggerField.closest('.a-dropdown__field').addClass('conditional-dropdown');
                    triggerField.closest('.a-dropdown__field').find('span').on('DOMSubtreeModified', function () {
                        const conditionalCaseValue = $('[data-conditional-variable=' + fieldName + ']').find('[data-conditional-case]').attr('data-conditional-case')?.replace('$', '/');
                        handleConditionalCase(fieldName, $(this)?.text()?.trim() === conditionalCaseValue);
                    });
                }
        
                if (triggerField?.hasClass('a-checkbox__input')) {
                    triggerField.addClass('conditional-checkbox');
                }
        
                if (triggerField?.hasClass('a-radio__input')) {
                    triggerField.addClass('conditional-radio');
                }
            });
        
            const handleChange = (selector) => {
                $("body").on('change', selector, function () {
                    const fieldName = $(this).attr('name');
                    const conditionalCaseValue = $('[data-conditional-variable=' + fieldName + ']').find('[data-conditional-case]').attr('data-conditional-case');
                    const show = $(this).prop('checked') && $(this).attr('value') === conditionalCaseValue;
                    handleConditionalCase(fieldName, show);
                    setTimeout(() => {
                        if ($('[required], [data-required="true"]').length === 0) {
                            $('.o-form-container__main-form+.o-form-container__buttons [type="submit"]').removeAttr('disabled');
                        }
                    }, 201);
                });
            };
        
            handleChange('.conditional-radio');
            handleChange('.conditional-checkbox');
        }
        
		if($('.o-form-container__main-form .a-dropdown__field')){
            $('.o-form-container__main-form .a-dropdown__field').on('click',function(e){
				e.stopPropagation();
            	$('.o-form-container__main-form .a-dropdown__field').not($(this)).removeClass('active');
            	setTimeout(() => {
						$(this).toggleClass('active');

            	}, 100);

        	})
			$('.o-form-container__main-form .a-dropdown__field .a-dropdown__menu li').on('click',function(){
				$(this).closest('.a-dropdown__menu').find('li').not($(this)).removeClass('selected').removeAttr('aria-selected');
            	setTimeout(() => {
					$(this).addClass('selected').closest('.a-dropdown__field').removeClass('active');
               		$(this).closest('.a-dropdown').find('.a-dropdown__field>span').removeClass('a-dropdown__placeholder').addClass('a-dropdown-selected');
            	}, 111);
				setTimeout(() => {
					$(this).closest('.a-dropdown').find('.a-dropdown__field>span').text($(this).find('span').text())
            	}, 211);
        	})
        }
    }, 1000);
})();
function MRISuccessmsgCallback(data){
	let colNumber = data.response.column_number;
    let redirectURL;
	let serialNumber = data.response.serial;
    if(colNumber==0){
        redirectURL = $('[name=mri-'+ colNumber +']').val();
    }
    else{
        if(colNumber > 0 && colNumber < 8){
	        redirectURL = $('[name=mri-verification').val() + '0' + colNumber;
        }
        else{
	        redirectURL = $('[name=mri-verification').val() + colNumber;
        }
    }

    if(colNumber>=0 && redirectURL){
		window.location.href = window.location.origin + redirectURL + '.html?id='+serialNumber;
    }
}
(function() {           
	setTimeout(function() { 
        let id  = urlParam('id');
        $('#mri_id').length > 0 && $('#mri_id').text(id);
        function urlParam(name) {
            let results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.search);
            return (results !== null) ? results[1] || "0" : "";
        }        
    }, 1000);
})();
(function(){
    setTimeout(function () {
      $("#mri-upload-submit")?.attr('disabled', true);
	  $('.cmp-embed input').on('click', function(){
       $('.o-form-container__success-msg').text('');
      $('.o-form-container__error-msg').text('');
    	});
      $('.cmp-embed input').on('change', function(){
       $('.o-form-container__success-msg').text('');
      $('.o-form-container__error-msg').text('');
        if($(this)[0].files[0].name.indexOf('.csv') < 0){
      		$(this).closest('.fields').addClass('validation-require');
          $('.allowcsv').addClass('active');
          $("#mri-upload-submit").attr('disabled', true);
        }
        else{
          $('.allowcsv').removeClass('active');
      		$(this).closest('.fields').removeClass('validation-require');
          let sizeInBytes = $(this)[0].files[0].size;
          let sizeInMB = (sizeInBytes / (1024*1024)).toFixed(2);
          if(sizeInMB > 10) {
            $('.allowsize').addClass('active');
            $("#mri-upload-submit").attr('disabled', true);
     		 $(this).closest('.fields').addClass('validation-require');
          }
          else{
            $('.allowsize').removeClass('active');
            $("#mri-upload-submit").attr('disabled', false);
      		$(this).closest('.fields').removeClass('validation-require');
          }
        }
        
      });
$("#mri-upload-submit").on('click', function (event) {
        event.preventDefault();
      loadercallback();
	  let response;
      let formData = new FormData();
        formData.append("file",$('.cmp-embed input')[0].files[0]);
        let xhr = new XMLHttpRequest();
        xhr.open("POST", document.querySelector('input[name="mriUploadRequest"]').value);
    	let headerCountryCode = document.querySelector('input[name="x-country-code"]').value;
        let headerApplicationId = "cardiovascularaem";
        let headerAccessKey = document.querySelector('input[name="accesskey"]').value;
    	xhr.setRequestHeader("x-country-code", headerCountryCode);
    	xhr.setRequestHeader("x-application-id", headerApplicationId);
		xhr.setRequestHeader("x-application-access-key", headerAccessKey);
        xhr.send(formData);
        xhr.onreadystatechange = function (oEvent) {
           if (xhr.readyState === 4) {
             if (xhr.status === 200) {
      			response = JSON.parse(xhr.responseText).response.statusReason;
				$('.o-form-container__success-msg').text(response);
				$('.o-form-container__success-msg')[0].style.textAlign = "center";
      			contactusSuccessmsgCallback();
             } else {               
				response = xhr.statusText;
				$('.o-form-container__error-msg').text(response);
				$('.o-form-container__error-msg')[0].style.textAlign = "center";
      			contactusFailuremsgCallback();
             }
           }
         }
    });
   },1000);

})();
function sortResponse(globalResponse){
    let filteredPOIData= [];
    let modifiedData = [];
    let poiData = globalResponse; 
    let filterValue = $('.a-dropdown__field .a-dropdown__menu li.selected').attr('data-optionvalue');
    if ($('.a-dropdown__field .a-dropdown__menu').attr('name') === 'device') {
        if (filterValue !== 'ALL') {
            let filterValueAll = filterValue.split(';'); 
            let filterValues = filterValueAll.map(element => {
                  return element.trim();
                });
            
            filterCheck();
            
            function filterCheck() {
                poiData.forEach(function(place) {   
                    let deviceTypeAll = place.deviceType[0].split(';');
                    let deviceTypes = deviceTypeAll.map(element => {
                      return element.trim();
                    });
                    filterValues.length === 1 ?
                        deviceTypes.includes(filterValues[0]) && (pushData(place)) :
                        deviceTypes.includes(filterValues[0]) && deviceTypes.includes(filterValues[1]) && deviceTypes.includes(filterValues[2])
                        && (pushData(place)); 
                    
                });
            }
            function pushData(place) {
                filteredPOIData.push(place);
            }
            let $pagination = $('.a-pagination');
            filteredPOIData.length > 0 ? $pagination.removeClass('d-none') : $pagination.addClass('d-none');
            return filteredPOIData;
        }
        else {
            modifiedData = updateData(poiData);
            return modifiedData; 
        }
    }
    else {
        modifiedData = updateData(poiData);
        return modifiedData;        
    }    
}

function updateData(poiData) {
    let updatedPOIData = [];
    poiData.forEach(function(place) {  
        updatedPOIData.push(place); 
    });
    let $pagination = $('.a-pagination');
    updatedPOIData.length > 0 ? $pagination.removeClass('d-none') : $pagination.addClass('d-none');
    return updatedPOIData;
}